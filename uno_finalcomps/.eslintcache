[{"/Users/amykim/Desktop/Uno_Comps/uno_finalcomps/src/index.js":"1","/Users/amykim/Desktop/Uno_Comps/uno_finalcomps/src/reportWebVitals.js":"2","/Users/amykim/Desktop/Uno_Comps/uno_finalcomps/src/App.js":"3","/Users/amykim/Desktop/Uno_Comps/uno_finalcomps/src/Components/Game/Game.js":"4","/Users/amykim/Desktop/Uno_Comps/uno_finalcomps/src/Components/Home/Home.js":"5","/Users/amykim/Desktop/Uno_Comps/uno_finalcomps/src/Components/Game/Card.js":"6","/Users/amykim/comps/uno_finalcomps/src/index.js":"7","/Users/amykim/comps/uno_finalcomps/src/App.js":"8","/Users/amykim/comps/uno_finalcomps/src/reportWebVitals.js":"9","/Users/amykim/comps/uno_finalcomps/src/Components/Game/Game.js":"10","/Users/amykim/comps/uno_finalcomps/src/Components/Home/Home.js":"11","/Users/amykim/comps/uno_finalcomps/src/Components/Game/Card.js":"12"},{"size":500,"mtime":1606980970000,"results":"13","hashOfConfig":"14"},{"size":362,"mtime":1606980970000,"results":"15","hashOfConfig":"14"},{"size":493,"mtime":1637970513991,"results":"16","hashOfConfig":"14"},{"size":30574,"mtime":1638222312869,"results":"17","hashOfConfig":"14"},{"size":1701,"mtime":1636400459787,"results":"18","hashOfConfig":"14"},{"size":2044,"mtime":1636148808040,"results":"19","hashOfConfig":"14"},{"size":500,"mtime":1606980970000,"results":"20","hashOfConfig":"21"},{"size":493,"mtime":1637970513991,"results":"22","hashOfConfig":"21"},{"size":362,"mtime":1606980970000,"results":"23","hashOfConfig":"21"},{"size":30574,"mtime":1638222312869,"results":"24","hashOfConfig":"21"},{"size":2914,"mtime":1639463904328,"results":"25","hashOfConfig":"21"},{"size":2044,"mtime":1636148808040,"results":"26","hashOfConfig":"21"},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},"1bhbaaw",{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"29"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"29"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"1phv2c7",{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"44"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"44"},"/Users/amykim/Desktop/Uno_Comps/uno_finalcomps/src/index.js",[],["56","57"],"/Users/amykim/Desktop/Uno_Comps/uno_finalcomps/src/reportWebVitals.js",[],"/Users/amykim/Desktop/Uno_Comps/uno_finalcomps/src/App.js",[],"/Users/amykim/Desktop/Uno_Comps/uno_finalcomps/src/Components/Game/Game.js",["58","59","60","61","62","63"],"/Users/amykim/Desktop/Uno_Comps/uno_finalcomps/src/Components/Home/Home.js",["64","65"],"import React from \"react\";\nimport \"./Home.css\";\nimport {withRouter} from \"react-router\";\nimport Facebook from \"./facebook/Facebook\";\n\nclass Home extends React.Component{\n    constructor(){\n        super();\n    }\n    _clicked(){\n     \n        window.location.href=`/game`;\n \n     }\n    render(){\n        return(\n            <div className = \"home\">\n                <h1>Three! Two! Uno!</h1>\n                \n                <div className = \"title\">\n                    This is a text-based web application version of the classic card game Uno! \n                    <p>\n                    The rules are simple: try your best to discard all the cards that you are dealt.\n                    Any cards left that are not accounted for will be used to rank your status using a unique point system: \n                    </p>\n                    -20 points for every action card: skip, +2, reverse\n                    <br/>\n                    -50 points for every color changing card: wild +4, color change\n                    <br/>\n                    -face value for every corresponding number value card: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9\n                    <br/>\n                    <p>\n                    At any point, if you wish to restart the game, please press the \"Restart Game\" button located at \n                    the bottom of the game page.\n                    </p>\n                   \n                </div>\n                <button className = \"start\" onClick={() => this._clicked()}>\n                Start Game!    \n                </button>\n\n                <div className = \"go\">\n                </div>\n               \n            </div>\n        )\n    }\n}\n\nexport default withRouter(Home);","/Users/amykim/Desktop/Uno_Comps/uno_finalcomps/src/Components/Game/Card.js",["66"],"import React from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport './Card.css';\n\nclass Card extends React.Component {\n    constructor() {\n        super();\n    }\n\n    getCSS() {\n        if (!this.props.card.color) {\n            return \"cardBoxwhite\";\n        }\n        return \"cardBox\".concat(this.props.card.color);\n    }\n\n    onTrigger = () => {\n        this.props.onClick(this.props.card);\n    }\n\n    onTriggerPink = () => {\n        this.props.onClick(this.props.card, \"pink\");\n    }\n\n    onTriggerYellow = () => {\n        this.props.onClick(this.props.card, \"yellow\");\n    }\n\n    onTriggerGreen = () => {\n        this.props.onClick(this.props.card, \"green\");\n    }\n\n    onTriggerOrange = () => {\n        this.props.onClick(this.props.card, \"orange\");\n    }\n\n    render() {\n\n        if (!this.props.card) {\n            return null;\n        }\n        const numberCard =\n        <div className={this.getCSS()} onClick={this.onTrigger}>\n            {this.props.card.color}&nbsp;\n            {this.props.card.value}\n        </div>;\n\n        const actionCard =\n        <div className={this.getCSS()} onClick={this.onTrigger}>\n            {this.props.card.color ? this.props.card.color : \"\"} &nbsp;\n            {this.props.card.action}\n        </div>\n\n        const wildCard =\n        <div className={this.getCSS()}>\n        {this.props.card.color ? this.props.card.color : \"\"} &nbsp;\n        {this.props.card.action}\n            <div onClick={this.onTriggerYellow}>\n                Yellow\n            </div>\n            <div onClick={this.onTriggerGreen}>\n                Green\n            </div>\n            <div onClick={this.onTriggerPink}>\n                Pink\n            </div>\n            <div onClick={this.onTriggerOrange}>\n                Orange\n            </div>\n        </div>\n\n        return this.props.card.action ? (this.props.hand &&\n            (this.props.card.action === \"colorSwitch\" || this.props.card.action === \"+4\") ?\n            wildCard : actionCard): numberCard;\n    }\n}\n\nexport default withRouter(Card);","/Users/amykim/comps/uno_finalcomps/src/index.js",[],["67","68"],"/Users/amykim/comps/uno_finalcomps/src/App.js",[],"/Users/amykim/comps/uno_finalcomps/src/reportWebVitals.js",[],"/Users/amykim/comps/uno_finalcomps/src/Components/Game/Game.js",["69","70","71","72","73","74"],"//this is the most up to date final version\nimport React from \"react\";\nimport { act } from \"react-dom/test-utils\";\nimport { withRouter } from \"react-router-dom\";\nimport Card from \"./Card\";\nimport './Game.css';\nimport { CountdownCircleTimer } from \"react-countdown-circle-timer\";\n\nconst colorIndex = ['orange', 'pink', 'yellow', 'green'];\n\nfunction uuidv4() {\n    return ([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g, c =>\n      (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)\n    );\n}\n\nlet timerCheck = false;\nlet sreverse = false;\nlet sactionPlayed = false;\nlet winnerWon = false;\nlet timerId = null;\nlet smessageLog = [];\n\nclass Game extends React.Component {\n\n    constructor() {\n        super();\n        this.player1Input = this.player1Input.bind(this);\n        this.state = {\n            time: 15,\n            isOn: false,\n            start: 0,\n            turn: 0,\n            gameCard: [],\n            p1Card: [],\n            p2Card: [],\n            p3Card: [],\n            p4Card: [],\n            garbageCard: [],\n            score: 0,\n            currentValue: null,\n            currentColor: null,\n            currentCard: null,\n            actionPlayed: false,\n            extraCards: 0,\n            skip: false,\n            reverse: false,\n            messageLog: [],\n        }\n        this.startTimer = this.startTimer.bind(this)\n        this.stopTimer = this.stopTimer.bind(this)\n        this.resetTimer = this.resetTimer.bind(this)\n    }\n\n    startTimer() {\n        this.setState({\n          isOn: true,\n          time: this.state.time,\n          start: this.state.time\n        });\n        timerId = setInterval(() => this.setState({\n          time: this.state.time - 1\n        }), 1000);\n    }\n    stopTimer() {\n        this.setState({isOn: false});\n        clearInterval(timerId);\n    }\n    resetTimer() {\n        clearInterval(timerId);\n        this.setState({time: 15, isOn: false});\n    }\n\n    componentDidMount() {\n        this.gameSetup();\n        this.distributeCards();\n        this.setState({\n            turn: 1,\n        })\n    }\n    _clicked(){\n     \n        window.location.reload();\n \n     }\n\n    getFirstCard(gameCards) {\n        let firstCardFound = false;\n        while (!firstCardFound) {\n            let randomIndex = Math.floor(Math.random() * (gameCards.length - 0 + 1) + 0);\n            console.log(randomIndex);\n            console.log(gameCards[randomIndex])\n            if (!gameCards[randomIndex].hasOwnProperty('action')) {\n                firstCardFound = true;\n                return randomIndex;\n            }\n        }\n    }\n\n    distributeCards() {\n        let gameCards = this.state.gameCard;\n        let p1Cards = [];\n        let p2Cards = [];\n        let p3Cards = [];\n        let p4Cards = [];\n        for (let i = 0; i < 7; i++) {\n            p1Cards.push(gameCards.pop());\n            p2Cards.push(gameCards.pop());\n            p3Cards.push(gameCards.pop());\n            p4Cards.push(gameCards.pop());\n        }\n        let firstCardIndex = this.getFirstCard(gameCards);\n        this.setState({\n            currentCard: gameCards[firstCardIndex],\n        })\n        gameCards.splice(firstCardIndex, 1);\n        this.setState({\n            p1Card: p1Cards,\n            p2Card: p2Cards,\n            p3Card: p3Cards,\n            p4Card: p4Cards,\n            gameCard: gameCards,\n        });\n    }\n\n    gameSetup() {\n        this.setState({\n            gameCard: []\n        });\n        this.setState({\n            gameCard: this.state.gameCard.push(\n                {\n                    id: uuidv4(),\n                    action: \"colorSwitch\",\n                    color: null,\n                },\n                {\n                    id: uuidv4(),\n                    action: \"colorSwitch\",\n                    color: null,\n                },\n                {\n                    id: uuidv4(),\n                    action: \"colorSwitch\",\n                    color: null,\n                },\n                {\n                    id: uuidv4(),\n                    action: \"colorSwitch\",\n                    color: null,\n                },\n                {\n                    id: uuidv4(),\n                    action: \"+4\",\n                    color: null,\n                },\n                {\n                    id: uuidv4(),\n                    action: \"+4\",\n                    color: null,\n                },\n                {\n                    id: uuidv4(),\n                    action: \"+4\",\n                    color: null,\n                },\n                {\n                    id: uuidv4(),\n                    action: \"+4\",\n                    color: null,\n                },\n            )\n        })\n        for (let j = 0; j < 4; j++) {\n            this.setState({\n                gameCard: this.state.gameCard.push(\n                    {\n                        id: uuidv4(),\n                        action: \"+2\",\n                        color: colorIndex[j],\n                    },\n                    {\n                        id: uuidv4(),\n                        action: \"+2\",\n                        color: colorIndex[j],\n                    },\n                    {\n                        id: uuidv4(),\n                        action: \"reverse\",\n                        color: colorIndex[j],\n                    },\n                    {\n                        id: uuidv4(),\n                        action: \"reverse\",\n                        color: colorIndex[j],\n                    },\n                    {\n                        id: uuidv4(),\n                        action: \"skip\",\n                        color: colorIndex[j],\n                    },\n                    {\n                        id: uuidv4(),\n                        action: \"skip\",\n                        color: colorIndex[j],\n                    },\n                )\n            })\n            for (let i = 0; i < 10; i++) {\n                if (i === 0) {\n                    this.setState({\n                        gameCard: this.state.gameCard.push(\n                            {\n                                id: uuidv4(),\n                                value: i,\n                                color: colorIndex[j],\n                            }\n                        )\n                    })\n                } else {\n                    this.setState({\n                        gameCard: this.state.gameCard.push(\n                            {\n                                id: uuidv4(),\n                                value: i,\n                                color: colorIndex[j],\n                            },\n                            {\n                                id: uuidv4(),\n                                value: i,\n                                color: colorIndex[j],\n                            }\n                        )\n                    })\n                }\n            }\n        }\n        this.setState({\n            gameCard: this.shuffle(this.state.gameCard)\n        })\n    }\n\n    shuffle(array) {\n        for (var i = array.length - 1; i > 0; i--) {\n            var j = Math.floor(Math.random() * (i + 1));\n            var temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n        }\n        return array;\n    }\n\n    myCards() {\n        return this.state.p1Card.map(card => {\n            return <Card onClick={this.player1Input} hand={true} card={card}/>\n        })\n    }\n\n    isColorlessActionCard(card) {\n        return card && card.color ? false : true;\n    }\n\n    validCard(cards) {\n        if (sactionPlayed) {\n            console.log(\"Action card played. skipping\");\n            return null;\n        }\n        // if existing card is wildcard cannto submit\n        if (this.isWildCard(this.state.currentCard) && sactionPlayed) {\n            console.log(\"Wildcard played and action card, skipping\")\n            return null;\n        }\n        //Include logic here todo: if they have wildcard it returns true\n        if (cards.some(function(element, index) {\n            if (element.action === \"+4\" || element.action === \"colorSwitch\") {\n                return true;\n            }\n            return false;\n        })) {\n            console.log(\"I have color switch or +4\");\n            return cards.filter((card) => {\n                return card.action === \"+4\" || card.action === \"colorSwitch\";\n            })[0];\n        }\n        // If current card is colorless action card\n        if (this.state.currentCard.action) {\n            switch (this.state.currentCard.action) {\n                case \"reverse\":\n                    console.log(\"Reverse played, can play any card same color\")\n                    return cards.filter((card) => {\n                        return card.color === this.state.currentCard.color;\n                    })[0]\n                case \"skip\":\n                    console.log(\"Skip played, can play any card same color\")\n                    return cards.filter((card) => {\n                        return card.color === this.state.currentCard.color;\n                    })[0];\n                case \"+4\":\n                    if (sactionPlayed) {\n                        return null;\n                    } else {\n                        console.log(\"+4 played but not action, can play any card same color\")\n                        return cards.filter((card) => {\n                            return card.color === this.state.currentCard.color;\n                        })[0]\n                    }\n                case \"+2\":\n                    if (sactionPlayed) {\n                        console.log(\"+2 played, but action. skipping\")\n                        return null;\n                    } else {\n                        console.log(\"+2 played but not action, can play any card same color\")\n                        return cards.filter((card) => {\n                            return card.color === this.state.currentCard.color;\n                        })[0]\n                    }\n                case \"colorSwitch\":\n                    console.log(\"ColorSwitch played but not action, can play any card same color\")\n                    return cards.filter((card) => {\n                        return card.color === this.state.currentCard.color;\n                    })[0]\n            }\n        } else if (this.state.currentCard.action === \"+2\" && sactionPlayed) {\n            console.log(\"+2 action card, skipping\")\n            // Colored +2\n            return null;\n        } else if (this.state.currentCard.action === \"+2\") {\n            console.log(\"+2 but not action card, can submit any with same color\")\n            return cards.filter((card) => {\n                return card.color === this.state.currentCard.color;\n            })[0]\n        } else if (cards.filter((card) => {\n            return card.color === this.state.currentCard.color;\n        }).length > 0) {\n            console.log(\"Matching any color\")\n            return cards.filter((card) => {\n                return card.color === this.state.currentCard.color;\n            })[0];\n        } else if (cards.filter((card) => {\n            return card.value === this.state.currentCard.value;\n        }).length > 0) {\n            console.log(\"Matching any number\")\n            return cards.filter((card) => {\n                return card.value === this.state.currentCard.value;\n            })[0];\n        }\n        console.log(\"None found\")\n        return null;\n    }\n    \n\n    advanceTurn(multiplier) {\n        if (sreverse) {\n            if (multiplier) {\n                if (this.state.turn === 1) {\n                    this.setState({\n                        turn: 3,\n                    })\n                } else if (this.state.turn === 2){\n                    this.setState({\n                        turn: 4,\n                    })\n                } else if (this.state.turn === 3){\n                    this.setState({\n                        turn: 1,\n                    })\n                } else if (this.state.turn === 4){\n                    this.setState({\n                        turn: 2,\n                    })\n                }\n            } else {\n                if (this.state.turn === 1) {\n                    this.setState({\n                        turn: 4,\n                    })\n                } else if (this.state.turn === 2){\n                    this.setState({\n                        turn: 1,\n                    })\n                } else if (this.state.turn === 3){\n                    this.setState({\n                        turn: 2,\n                    })\n                } else if (this.state.turn === 4){\n                    this.setState({\n                        turn: 3,\n                    })\n                }\n            }\n        } else {\n            if (multiplier) {\n                if (this.state.turn === 1) {\n                    this.setState({\n                        turn: 3,\n                    })\n                } else if (this.state.turn === 2){\n                    this.setState({\n                        turn: 4,\n                    })\n                } else if (this.state.turn === 3){\n                    this.setState({\n                        turn: 1,\n                    })\n                } else if (this.state.turn === 4){\n                    this.setState({\n                        turn: 2,\n                    })\n                }\n            } else {\n                if (this.state.turn === 1) {\n                    this.setState({\n                        turn: 2,\n                    })\n                } else if (this.state.turn === 2){\n                    this.setState({\n                        turn: 3,\n                    })\n                } else if (this.state.turn === 3){\n                    this.setState({\n                        turn: 4,\n                    })\n                } else if (this.state.turn === 4){\n                    this.setState({\n                        turn: 1,\n                    })\n                }\n            }\n        }\n    }\n\n\n\n    player1ValidCheck() {\n        // Checks if player 1 has valid cards.\n        if (!this.validCard(this.state.p1Card) || sactionPlayed) {\n            // if they dont have valid card, add one card to deck\n            let gameCards = this.state.gameCard;\n            let p1Cards = this.state.p1Card;\n            p1Cards.push(gameCards.pop());\n            if (this.state.extraCards > 0) {\n                for (let i = 0; i < this.state.extraCards - 1; i++) {\n                    // Draw more cards if there is plus card\n                    p1Cards.push(gameCards.pop());\n                }\n            }\n            this.setState({\n                gameCard: gameCards,\n                p1Card: p1Cards,\n                extraCards: 0,\n                actionPlayed: false,\n            });\n            sactionPlayed = false;\n            console.log(\"player 1 Drew card, extra:{}\", this.state.extraCards);\n            smessageLog.push(\"player 1 Drew card, extra:\" + this.state.extraCards);\n            this.advanceTurn();\n        } else {\n            timerCheck = false;\n            this.startTimer();\n        }\n    }\n\n    noop() {}\n\n    player2ValidCheck() {\n        if (!this.validCard(this.state.p2Card)) {\n            // if they dont have valid card, add one card to deck\n            let gameCards = this.state.gameCard;\n            let p2Cards = this.state.p2Card;\n            p2Cards.push(gameCards.pop());\n            if (this.state.extraCards > 0) {\n                for (let i = 0; i < this.state.extraCards - 1; i++) {\n                    // Draw more cards if there is plus card\n                    p2Cards.push(gameCards.pop());\n                }\n            }\n            this.setState({\n                gameCard: gameCards,\n                p2Card: p2Cards,\n                extraCards: 0,\n            });\n            smessageLog.push(\"player 2 Drew card, extra:\" + this.state.extraCards);\n            console.log(\"player 2 Drew card, extra:{}\", this.state.extraCards);\n            if (sactionPlayed) {\n                sactionPlayed = false;\n                this.setState({\n                    actionPlayed: false,\n                })\n            }\n            this.advanceTurn();\n        } else {\n            let playingCard = this.validCard(this.state.p2Card)\n            let p2Cards = this.state.p2Card;\n            let garbageCards = this.state.garbageCard;\n            let tempCard = playingCard;\n            smessageLog.push(\"player 2 played:\" + JSON.stringify(playingCard));\n            console.log(\"player 2 played: {}\", playingCard);\n            if (this.validCard([playingCard])) {\n                if (this.isWildCard(playingCard)) {\n                    tempCard.color = \"orange\";\n                }\n                if (playingCard.action === \"+2\") {\n                    sactionPlayed = true;\n                    this.setState({\n                        extraCards: 2,\n                        actionPlayed: true,\n                    })\n                }\n                if (playingCard.action === \"+4\") {\n                    sactionPlayed = true;\n                    this.setState({\n                        extraCards: 4,\n                        actionPlayed: true,\n                    })\n                }\n                setTimeout(this.noop, 3000);\n                p2Cards = p2Cards.filter(item => !(item.id === playingCard.id));\n                garbageCards.push(playingCard);\n                this.setState({\n                    currentCard: tempCard,\n                    p2Card: p2Cards,\n                    garbageCard: garbageCards,\n                })\n                if (playingCard.action === \"reverse\") {\n                    this.setState({\n                        reverse: !this.state.reverse,\n                    })\n                    sreverse = !sreverse;\n                }\n                if (playingCard.action === \"skip\") {\n                        this.advanceTurn(2);\n                } else {\n                        this.advanceTurn();\n                }\n                \n            }\n        }\n    }\n\n\n    player3ValidCheck() {\n        if (!this.validCard(this.state.p3Card)) {\n            // if they dont have valid card, add one card to deck\n            let gameCards = this.state.gameCard;\n            let p3Cards = this.state.p3Card;\n            p3Cards.push(gameCards.pop());\n            if (this.state.extraCards > 0) {\n                for (let i = 0; i < this.state.extraCards - 1; i++) {\n                    // Draw more cards if there is plus card\n                    p3Cards.push(gameCards.pop());\n                }\n            }\n            this.setState({\n                gameCard: gameCards,\n                p3Card: p3Cards,\n                extraCards: 0,\n            });\n            smessageLog.push(\"player 3 Drew card, extra:\" + this.state.extraCards);\n            console.log(\"player 3 Drew card, extra:{}\", this.state.extraCards);\n            if (sactionPlayed) {\n                sactionPlayed = false;\n                this.setState({\n                    actionPlayed: false,\n                })\n            }\n            this.advanceTurn();\n        } else {\n            let playingCard = this.validCard(this.state.p3Card)\n            let p3Cards = this.state.p3Card;\n            let garbageCards = this.state.garbageCard;\n            let tempCard = playingCard;\n            smessageLog.push(\"player 3 played: \" + JSON.stringify(playingCard));\n\n            console.log(\"player 3 played: {}\", playingCard);\n            if (this.validCard([playingCard])) {\n                if (this.isWildCard(playingCard)) {\n                    tempCard.color = \"orange\";\n                }\n                if (playingCard.action === \"+2\") {\n                    sactionPlayed = true;\n                    this.setState({\n                        extraCards: 2,\n                        actionPlayed: true,\n                    })\n                }\n                if (playingCard.action === \"+4\") {\n                    sactionPlayed = true;\n                    this.setState({\n                        extraCards: 4,\n                        actionPlayed: true,\n                    })\n                }\n                setTimeout(this.noop, 3000);\n                p3Cards = p3Cards.filter(item => !(item.id === playingCard.id));\n                garbageCards.push(playingCard);\n                this.setState({\n                    currentCard: tempCard,\n                    p3Card: p3Cards,\n                    garbageCard: garbageCards,\n                })\n                if (playingCard.action === \"reverse\") {\n                    this.setState({\n                        reverse: !this.state.reverse,\n                    })\n                    sreverse = !sreverse;\n                }\n                if (playingCard.action === \"skip\") {\n                        this.advanceTurn(2);\n                } else {\n                        this.advanceTurn();\n                }\n                \n            }\n        }\n    }\n\n\n    player4ValidCheck() {\n        if (!this.validCard(this.state.p4Card)) {\n            // if they dont have valid card, add one card to deck\n            let gameCards = this.state.gameCard;\n            let p4Cards = this.state.p4Card;\n            p4Cards.push(gameCards.pop());\n            if (this.state.extraCards > 0) {\n                for (let i = 0; i < this.state.extraCards - 1; i++) {\n                    // Draw more cards if there is plus card\n                    p4Cards.push(gameCards.pop());\n                }\n            }\n            this.setState({\n                gameCard: gameCards,\n                p4Card: p4Cards,\n                extraCards: 0,\n            });\n            smessageLog.push(\"player 4 Drew card, extra:\" + this.state.extraCards);\n            if (this.state.actionPlayed) {\n                sactionPlayed = false;\n                this.setState({\n                    actionPlayed: false,\n                })\n            }\n            console.log(\"player 4 Drew card, extra:{}\", this.state.extraCards);\n            this.advanceTurn();\n        } else {\n            let playingCard = this.validCard(this.state.p4Card)\n            let p4Cards = this.state.p4Card;\n            let garbageCards = this.state.garbageCard;\n            let tempCard = playingCard;\n            smessageLog.push(\"player 4 played:\" + JSON.stringify(playingCard));\n            console.log(\"player 4 played: {}\", playingCard);\n            if (this.validCard([playingCard])) {\n                if (this.isWildCard(playingCard)) {\n                    tempCard.color = \"orange\";\n                }\n                if (playingCard.action === \"+2\") {\n                    sactionPlayed = true;\n                    this.setState({\n                        extraCards: 2,\n                        actionPlayed: true,\n                    })\n                }\n                if (playingCard.action === \"+4\") {\n                    sactionPlayed = true;\n                    this.setState({\n                        extraCards: 4,\n                        actionPlayed: true,\n                    })\n                }\n                setTimeout(this.noop, 3000);\n                p4Cards = p4Cards.filter(item => !(item.id === playingCard.id));\n                garbageCards.push(playingCard);\n                this.setState({\n                    currentCard: tempCard,\n                    p4Card: p4Cards,\n                    garbageCard: garbageCards,\n                })\n                if (playingCard.action === \"reverse\") {\n                    this.setState({\n                        reverse: !this.state.reverse,\n                    })\n                    sreverse = !sreverse;\n                }\n                if (playingCard.action === \"skip\") {\n                        this.advanceTurn(2);\n                } else {\n                        this.advanceTurn();\n                }\n                \n            }\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevState.turn !== this.state.turn && this.state.currentCard) {\n            this.engine();\n        }\n    }\n\n    engine() {\n        if (this.state.gameCard.length < 5) {\n            console.log(\"Gamecard running out, shuffling garbage deck in\");\n            let gameCards = this.state.gameCard;\n            let garbageCards = this.state.garbageCard;\n            gameCards.concat(garbageCards);\n            this.setState({\n                gameCard: gameCards,\n                garbageCard: [],\n            });\n        }\n        if (this.state.turn === 1) {\n            // player 1 turn\n            console.log(\"my turn\");\n            this.player1ValidCheck();\n        } else if (this.state.turn === 2) {\n            this.player2ValidCheck();\n        } else if (this.state.turn === 3) {\n            this.player3ValidCheck();\n        } else if (this.state.turn === 4) {\n            this.player4ValidCheck();\n        }\n    }\n\n    player1Input(card, wildCardColor) {\n        if (this.state.turn === 1) {\n            this.stopTimer();\n            this.resetTimer();\n            console.log(\"player 1 played: {}\", card);\n            smessageLog.push(\"player 1 played:\" + JSON.stringify(card));\n            let p1Cards = this.state.p1Card;\n            let garbageCards = this.state.garbageCard;\n            let tempCard = card;\n            if (this.validCard([card])) {\n                if (this.isWildCard(card)) {\n                    tempCard.color = wildCardColor;\n                }\n                if (card.action === \"+2\") {\n                    sactionPlayed = true;\n                    this.setState({\n                        extraCards: 2\n                    })\n                }\n                if (card.action === \"+4\") {\n                    sactionPlayed = true;\n                    this.setState({\n                        extraCards: 4\n                    })\n                }\n                setTimeout(this.noop, 3000);\n                p1Cards = p1Cards.filter(item => !(item.id === card.id));\n                garbageCards.push(card);\n                this.setState({\n                    currentCard: tempCard,\n                    p1Card: p1Cards,\n                    garbageCard: garbageCards,\n                })\n                if (card.action === \"reverse\") {\n                    this.setState({\n                        reverse: !this.state.reverse,\n                    })\n                    sreverse = !sreverse;\n                }\n                if (card.action === \"skip\") {\n                        this.advanceTurn(2);\n                } else {\n                        this.advanceTurn();\n                }\n                \n            }\n        }\n    }\n\n    isWildCard(card) {\n        if (card.action === \"+4\" || card.action === \"colorSwitch\") {\n            return true;\n        }\n        return false;\n    }\n\n    logComponent() {\n        return smessageLog.map(log => {\n            return <div>{log}</div>\n        })\n    }\n\n    render() {\n\n        if (this.state.time === 0 && !timerCheck) {\n            timerCheck = true;\n            this.resetTimer();\n            let gameCards = this.state.gameCard;\n            let p1Cards = this.state.p1Card;\n            p1Cards.push(gameCards.pop());\n            if (this.state.extraCards > 0) {\n                for (let i = 0; i < this.state.extraCards - 1; i++) {\n                    // Draw more cards if there is plus card\n                    p1Cards.push(gameCards.pop());\n                }\n            }\n            this.setState({\n                gameCard: gameCards,\n                p1Card: p1Cards,\n                extraCards: 0,\n                actionPlayed: false,\n            });\n            sactionPlayed = false;\n            console.log(\"player 1 Time expired, Drew card, extra:{}\", this.state.extraCards);\n            smessageLog.push(\"player 1 Time expired, Drew card, extra:\" + this.state.extraCards);\n            this.advanceTurn();\n        }\n      \n        if (this.state.p1Card.length === 0 && this.state.currentCard) {\n            !winnerWon && alert(\"You win! Stay for another round!\");\n            winnerWon = true;\n            window.location.reload();\n        }\n        if (this.state.p2Card.length === 0 && this.state.currentCard) {\n            !winnerWon && alert(\"Player 2 wins! Play another round if you dare!\");\n            winnerWon = true;\n            window.location.reload();\n        }\n        if (this.state.p3Card.length === 0 && this.state.currentCard) {\n            !winnerWon && alert(\"Player 3 wins! Play another round if you dare!\");\n            winnerWon = true;\n            window.location.reload();\n        }\n        if (this.state.p4Card.length === 0 && this.state.currentCard) {\n            !winnerWon && alert(\"Player 4 wins! Play another round if you dare!\");\n            winnerWon = true;\n            window.location.reload();\n        }\n        return (\n            <div className = \"Game\">\n                <h1>Three! Two! Uno!</h1>\n                <div>\n                <div className=\"Timer\">\n                <CountdownCircleTimer isPlaying={true}\n                size={180}\n                duration={180}\n                onComplete={() => {\n                    !winnerWon && alert(\"Time expired.  Resetting!\");\n                    winnerWon = true;\n                    window.location.reload();\n                }}\n                colors={[\n                    ['#004777', 0.33],\n                    ['#F7B801', 0.33],\n                    ['#A30000', 0.33],\n                ]}>\n                    {({ remainingTime }) => remainingTime}\n                </CountdownCircleTimer></div></div>\n                <div>\n                Personal Timer(s): {this.state.time}<div className=\"Timer\"></div></div>\n                <div>Player 1 Cards: {this.state.p1Card.length}</div>\n                <div>Player 2 Cards: {this.state.p2Card.length}</div>\n                <div>Player 3 Cards: {this.state.p3Card.length}</div>\n                <div>Player 4 Cards: {this.state.p4Card.length}</div>\n                <p></p>\n                <div className = \"currentCard\"><Card card={this.state.currentCard}/></div>\n                <div className=\"columnC\">\n                    {this.myCards()}\n                </div>\n                <div>Number of Cards in deck: {this.state.gameCard.length}</div>\n                <div>Number of Cards in garbage: {this.state.garbageCard.length}</div>\n                <div>Play Transcript: </div>\n                <div className=\"boxWidth\">{this.logComponent()}</div>\n                <button className = \"start\" onClick={() => this._clicked()}>\n                    Restart Game    \n                </button>\n            </div>\n        );\n    }\n}\n\nexport default withRouter(Game);","/Users/amykim/comps/uno_finalcomps/src/Components/Home/Home.js",["75"],"/Users/amykim/comps/uno_finalcomps/src/Components/Game/Card.js",["76"],{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","severity":1,"message":"82","line":3,"column":10,"nodeType":"83","messageId":"84","endLine":3,"endColumn":13},{"ruleId":"85","severity":1,"message":"86","line":13,"column":10,"nodeType":"87","messageId":"88","endLine":13,"endColumn":11},{"ruleId":"85","severity":1,"message":"86","line":13,"column":57,"nodeType":"87","messageId":"88","endLine":13,"endColumn":58},{"ruleId":"85","severity":1,"message":"89","line":13,"column":57,"nodeType":"87","messageId":"88","endLine":13,"endColumn":58},{"ruleId":"85","severity":1,"message":"89","line":13,"column":62,"nodeType":"87","messageId":"88","endLine":13,"endColumn":64},{"ruleId":"90","severity":1,"message":"91","line":287,"column":13,"nodeType":"92","messageId":"93","endLine":322,"endColumn":14},{"ruleId":"81","severity":1,"message":"94","line":4,"column":8,"nodeType":"83","messageId":"84","endLine":4,"endColumn":16},{"ruleId":"95","severity":1,"message":"96","line":7,"column":5,"nodeType":"97","messageId":"98","endLine":9,"endColumn":6},{"ruleId":"95","severity":1,"message":"96","line":6,"column":5,"nodeType":"97","messageId":"98","endLine":8,"endColumn":6},{"ruleId":"77","replacedBy":"99"},{"ruleId":"79","replacedBy":"100"},{"ruleId":"81","severity":1,"message":"82","line":3,"column":10,"nodeType":"83","messageId":"84","endLine":3,"endColumn":13},{"ruleId":"85","severity":1,"message":"86","line":13,"column":10,"nodeType":"87","messageId":"88","endLine":13,"endColumn":11},{"ruleId":"85","severity":1,"message":"86","line":13,"column":57,"nodeType":"87","messageId":"88","endLine":13,"endColumn":58},{"ruleId":"85","severity":1,"message":"89","line":13,"column":57,"nodeType":"87","messageId":"88","endLine":13,"endColumn":58},{"ruleId":"85","severity":1,"message":"89","line":13,"column":62,"nodeType":"87","messageId":"88","endLine":13,"endColumn":64},{"ruleId":"90","severity":1,"message":"91","line":287,"column":13,"nodeType":"92","messageId":"93","endLine":322,"endColumn":14},{"ruleId":"95","severity":1,"message":"96","line":7,"column":5,"nodeType":"97","messageId":"98","endLine":9,"endColumn":6},{"ruleId":"95","severity":1,"message":"96","line":6,"column":5,"nodeType":"97","messageId":"98","endLine":8,"endColumn":6},"no-native-reassign",["101"],"no-negated-in-lhs",["102"],"no-unused-vars","'act' is defined but never used.","Identifier","unusedVar","no-mixed-operators","Unexpected mix of '^' and '&'. Use parentheses to clarify the intended order of operations.","BinaryExpression","unexpectedMixedOperator","Unexpected mix of '&' and '>>'. Use parentheses to clarify the intended order of operations.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'Facebook' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor",["101"],["102"],"no-global-assign","no-unsafe-negation"]